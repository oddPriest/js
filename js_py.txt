以下に、http-server を使った Node.js フロントエンド（静的サイト）と Django バックエンド（REST API）連携の雛形・テンプレートを紹介します。http-server はシンプルな静的ファイルサーバーで、フォームを使ってユーザー入力を受け取り、JavaScript の fetch() 経由で Django に API リクエストを送る構成です。

⸻

🔧 構成概要

/frontend/       ← Node.js + http-server でホスト（HTML+JS）
/backend/        ← Django（REST API）


⸻

📁 ディレクトリ構成（雛形）

attendance-app/
├── frontend/
│   ├── index.html
│   ├── js/
│   │   └── submit.js
│   └── style.css
└── backend/
    └── [Django プロジェクト一式]


⸻

🌐 フロント（Node.js http-server）

🔹 1. frontend/index.html

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>勤怠記録</title>
  <script src="js/submit.js" defer></script>
</head>
<body>
  <h1>出勤打刻</h1>
  <form id="attendance-form">
    <label>ユーザーID:
      <input type="text" id="user-id" required>
    </label>
    <button type="submit">打刻</button>
  </form>
  <p id="message"></p>
</body>
</html>


⸻

🔹 2. frontend/js/submit.js

document.getElementById('attendance-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const userId = document.getElementById('user-id').value;
  const now = new Date().toISOString();

  try {
    const response = await fetch('http://localhost:8000/api/attendance/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user: userId,
        clock_in: now
      })
    });

    const result = await response.json();
    document.getElementById('message').textContent = '打刻成功: ' + JSON.stringify(result);
  } catch (err) {
    document.getElementById('message').textContent = '通信エラー';
  }
});


⸻

🔹 3. http-server で起動

# 必要な場合インストール
npm install -g http-server

# frontend ディレクトリで実行（ポートは例）
http-server -p 3000

→ ブラウザで http://localhost:3000 にアクセスすると、フォームから Django に打刻できます。

⸻

🐍 バックエンド（Django）

🔹 Django側のAPI（簡略例）

models.py

from django.db import models

class Attendance(models.Model):
    user = models.CharField(max_length=100)
    clock_in = models.DateTimeField()

serializers.py

from rest_framework import serializers
from .models import Attendance

class AttendanceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Attendance
        fields = '__all__'

views.py

from rest_framework.decorators import api_view
from rest_framework.response import Response
from .serializers import AttendanceSerializer

@api_view(['POST'])
def attendance_create(request):
    serializer = AttendanceSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save()
        return Response(serializer.data, status=201)
    return Response(serializer.errors, status=400)

urls.py

from django.urls import path
from .views import attendance_create

urlpatterns = [
    path('api/attendance/', attendance_create),
]


⸻

⚠️ 補足
	•	Django 側で CORS 対応が必要です。以下を settings.py に追加：

pip install django-cors-headers

INSTALLED_APPS = [
    ...,
    'corsheaders',
    ...
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]

CORS_ALLOW_ALL_ORIGINS = True  # ※開発中のみ


⸻

✅ 最終イメージ
	•	http-server により HTML + JS が提供され、
	•	JSがユーザー入力を Django API にPOST、
	•	DjangoがDBに保存し、レスポンスを返す

このような構成なら、軽量に Node.jsの簡易フロント + Djangoの強力なバックエンド を両立できます。

⸻

必要であれば、全ファイルをまとめたテンプレートZipや、打刻記録の一覧表示対応もご案内できます。どの程度の完成度まで必要か教えてください。